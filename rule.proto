syntax = "proto2";
package dv360_excel_plugin;

// A message that represents a scheduled rule for manipulating DV360 entities.
message Rule {
  // required
  // The name of the rule, set by the user.
  optional string name = 1;

  // The id that uniquely identified each rule.
  optional string id = 2;

  // required
  optional Action action = 3;

  // required
  optional Schedule schedule = 4;

  // optional
  optional Condition condition = 5;

  // required
  optional Scope scope = 6;
}

// A message representing the action applied to a DV360 entity.
message Action {
  enum Type {
    UNSPECIFIED_TYPE = 0;
    CHANGE_LINE_ITEM_STATUS = 1;
    CHANGE_LINE_ITEM_BIDDING_STRATEGY = 2;
  }

  // required
  // The type of action.
  optional Type type = 1;

  // required
  // The parameters used for each type of action.
  oneof params {
    ChangeLineItemStatusParams change_line_item_status_params = 2;
    ChangeLineItemBiddingStrategyParams change_line_item_bidding_strategy_params = 3;
  }
}

// The action parameters to change line items' status.
message ChangeLineItemStatusParams {
  enum Status {
    UNSPECIFIED_STATUS = 0;
    ACTIVE = 1;
    PAUSED = 2;
  }

  // required
  // The status of which the line item will be changed to.
  optional Status status = 3;
}

// The action parameters to change line items' bidding strategy.
message ChangeLineItemBiddingStrategyParams {
  enum BiddingStrategy {
    UNSPECIFIED_STRATEGY = 0;
    FIXED = 1;
    MAXIMIZE_SPEND = 2;
    PERFORMANCE_GOAL = 3;
  }

  // required
  // The bidding strategy to change to.
  optional BiddingStrategy bidding_strategy = 1;

  // required
  // The parameters used for each type of bidding strategy.
  oneof params {
    FixedBidStrategyParams fixed_bid_strategy_params = 2;
    MaximizeSpendBidStrategyParams maximize_spend_bid_strategy_params = 3;
    PerformanceGoalBidStrategyParams performance_goal_bid_strategy_params = 4;
  }
}

// A message representing the parameters for fixed bid strategy.
message FixedBidStrategyParams {
  // required
  // The fixed bid amount (micros) in the advertiser's currency.
  optional int64 bid_amount_micros = 1;
}

enum BiddingStrategyPerformanceGoalType {
  UNSPECIFIED_GOAL= 0;
  CPA = 1;
  CPC = 2;
  VIEWABLE_IMPRESSIONS = 3;
}

// A message representing the parameters for maximize spend bid strategy.
message MaximizeSpendBidStrategyParams {
  // required
  // The performance goal that will be minimized while spending the full budget.
  optional BiddingStrategyPerformanceGoalType type = 1;
}

// A message representing the parameters for performance goal bid strategy.
message PerformanceGoalBidStrategyParams {
  // required
  // The performance goal that will be met or beat.
  optional BiddingStrategyPerformanceGoalType type = 1;

  // required
  // The performance goal amount (micros) in the advertiser's currency.
  optional int64 performance_goal_amount_micros = 2;
}

// A message representing the schedule the rule will be run.
message Schedule {
  enum Type {
    UNSPECIFIED_SCHEDULE = 0;
    REPEATING = 1;
    ONE_TIME = 2;
  }

  // required
  // The rule can be scheduled for either repeating or one-time.
  optional Type type = 1;

  // The parameters for a repeating rule.
  message RepeatingParams {
    // required
    // The cron expression representing the repeating schedule.
    optional string cron_expression = 1;
  }

  // The parameters for a one-time rule.
  message OneTimeParams {
    // required
    // The cron expression representing the one-time schedule.
    optional string cron_expression = 1;

    // required
    // The year of the one-time date.
    optional int32 year = 2;
  }

  // required
  // The parameters used for each type of scheduling.
  oneof params {
    RepeatingParams repeating_params = 2;
    OneTimeParams one_time_params = 3;
  }

  // required
  // The timezone name of the scheduled job from the tz database.
  // See: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
  optional string timezone = 4;
}

// A message representing the condition for a rule.
message Condition {
  enum Type {
    UNSPECIFIED_TYPE = 0;
    CPM = 1;
  }

  // required
  // The type of condition.
  optional Type type = 1;

  enum Relation {
    UNSPECIFIED_RELATION = 0;
    LESSER_EQUAL = 1;
    GREATER = 2;
  }

  // required
  // The relation used for comparison.
  optional Relation relation = 2;

  // required
  // The value which the metric will be compared against.
  optional double value = 3;
}

// A message that represents the target entities for a rule.
message Scope {
  enum Type {
    UNSPECIFIED_TYPE = 0;
    LINE_ITEM_TYPE = 1;
  }

  // required
  // The type of scope.
  optional Type type = 1;

  // required
  // The parameters used for each type of scope.
  oneof params {
    LineItemScopeParams line_item_scope_params = 2;
  }
}

// A message representing the parameters for line item scopes.
message LineItemScopeParams {
  // required
  // The ID of line items.
  repeated int64 line_item_ids = 1;

  // required
  // The ID of advertiser to which the line items belong to.
  optional int64 advertiser_id = 2;
}
